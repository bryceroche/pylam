CREATE DEFINER=`adridba`@`%` PROCEDURE `DEVTRUGREENV2`.`SP_MONTH_AVAIL`(IN P_USER_ID INT, IN INT_MINUTE_BREAK INT)
BEGIN

DROP TEMPORARY TABLE IF EXISTS TMP_SCHEDULE;

DROP TEMPORARY TABLE IF EXISTS TMP_AVAILABLE;
DROP TEMPORARY TABLE IF EXISTS TMP_AVAILABLE_;

DROP TEMPORARY TABLE IF EXISTS TMP_OPEN_TIMES;
DROP TEMPORARY TABLE IF EXISTS TMP_OPEN_TIMES_;

DROP TEMPORARY TABLE IF EXISTS TMP_CONSEC1;
DROP TEMPORARY TABLE IF EXISTS TMP_CONSEC1_;
 
DROP TEMPORARY TABLE IF EXISTS TMP_CONSEC_STAGE;

DROP TEMPORARY TABLE IF EXISTS TMP_CONSEC2;
DROP TEMPORARY TABLE IF EXISTS TMP_CONSEC2_;



CREATE TEMPORARY TABLE TMP_SCHEDULE ENGINE = MEMORY  
SELECT A.START_DATE, A.END_DATE
FROM INTERVIEW A
WHERE A.END_DATE>=NOW() AND (A.MANAGER_ID = P_USER_ID OR A.CANDIDATE_ID = P_USER_ID)

UNION ALL 

SELECT A.START_DATE, A.END_DATE
FROM VACATION A
WHERE A.END_DATE>=NOW() AND A.USER_ID = P_USER_ID

UNION ALL 

SELECT A.LUNCH_START AS START_DATE, A.LUNCH_END AS END_DATE
FROM V_AVAILABILITY A
WHERE A.USER_ID = P_USER_ID;




CREATE TEMPORARY TABLE TMP_AVAILABLE ENGINE = MEMORY 
SELECT  A.THE_DATE, 
A.AVAILABLE_START,
A.AVAILABLE_END
FROM V_AVAILABILITY A
WHERE A.AVAILABLE_END >= NOW() AND USER_ID = P_USER_ID
GROUP BY A.THE_DATE
ORDER BY 1;


CREATE TEMPORARY TABLE IF NOT EXISTS TMP_AVAILABLE_ AS (SELECT * FROM TMP_AVAILABLE);


CREATE TEMPORARY TABLE TMP_OPEN_TIMES ENGINE = MEMORY 
SELECT  B.ROW_ID AS ID,B.TIME_INSTANCE
FROM V_TIMEMAPMONTH B
JOIN TMP_AVAILABLE C ON B.TIME_INSTANCE BETWEEN C.AVAILABLE_START AND C.AVAILABLE_END
LEFT JOIN TMP_SCHEDULE A  ON B.TIME_INSTANCE BETWEEN (A.START_DATE + INTERVAL + 5  MINUTE) AND (A.END_DATE + INTERVAL - 5 + INT_MINUTE_BREAK MINUTE)
LEFT JOIN HOLIDAY D ON B.TIME_INSTANCE BETWEEN D.START_DATE AND D.END_DATE
WHERE A.START_DATE IS NULL AND D.START_DATE IS NULL
GROUP BY  B.ROW_ID,B.TIME_INSTANCE
ORDER BY B.ROW_ID;

CREATE TEMPORARY TABLE IF NOT EXISTS TMP_OPEN_TIMES_ AS (SELECT * FROM TMP_OPEN_TIMES);


SET @rank=0; 
CREATE TEMPORARY TABLE TMP_CONSEC1 ENGINE=MEMORY 
SELECT @rank:=@rank+1 AS ROW_ID, D.* FROM (
SELECT A.*, B.ID AS ID2, B.TIME_INSTANCE AS END_DATE
FROM TMP_OPEN_TIMES A
LEFT JOIN TMP_OPEN_TIMES_ B ON A.ID=B.ID-1
ORDER BY 2) D;


CREATE TEMPORARY TABLE IF NOT EXISTS TMP_CONSEC1_ AS (SELECT * FROM TMP_CONSEC1);


CREATE TEMPORARY TABLE TMP_CONSEC_STAGE  ENGINE=MEMORY
SELECT ID FROM TMP_CONSEC1 WHERE ROW_ID - 1 IN (SELECT ROW_ID  FROM TMP_CONSEC1_ WHERE ID2 IS NULL);


INSERT INTO TMP_CONSEC_STAGE  
SELECT ID FROM TMP_CONSEC1 WHERE ID2 IS NULL;

INSERT INTO TMP_CONSEC_STAGE
SELECT MIN(ID) AS ID FROM TMP_CONSEC1;

SET @rank=0; 
CREATE TEMPORARY TABLE TMP_CONSEC2  ENGINE=MEMORY
SELECT @rank:=@rank+1 AS ROW_ID2,A.* 
FROM TMP_CONSEC1 A
JOIN TMP_CONSEC_STAGE B ON A.ID = B.ID;


CREATE TEMPORARY TABLE IF NOT EXISTS TMP_CONSEC2_ AS (SELECT * FROM TMP_CONSEC2);

SELECT   

		D.FIRST_NAME,
		D.LAST_NAME,
		D.USER_ID,
		D.PHONE,
		D.EMAIL,
        DAYNAME(A.TIME_INSTANCE) AS WEEK_DAY,
		DATE(A.TIME_INSTANCE) AS THE_DATE, 
		A.TIME_INSTANCE AS START_DATE, 
		B.TIME_INSTANCE AS END_DATE,
		TIMESTAMPDIFF(MINUTE, A.TIME_INSTANCE, B.TIME_INSTANCE) AS AVAILABLE_TIME_MINUTES

FROM TMP_CONSEC2 A
JOIN USERS D ON D.USER_ID = P_USER_ID
LEFT JOIN TMP_CONSEC2_ B ON A.ROW_ID2=B.ROW_ID2-1
WHERE A.ID2 IS NOT NULL;



END